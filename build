#!/usr/bin/env python2.7

import os
import os.path
import re

from fabricate import *

def makedirs(d):
    if not os.path.isdir(d):
        os.makedirs(d)

def read_operations():
    with open("fetched/supercop-20130419/OPERATIONS") as f:
        for l in f:
            op, macros, prototypes = l.strip().split(None, 2)
            macros = macros.split(':')
            prototypes = prototypes.split(':')
            yield (op, dict(macros=macros, prototypes=prototypes))

operations = dict(read_operations())

o_header = """
#ifndef {o}_H
#define {o}_H

#include "{op}.h"

{o_macros}

#endif
"""

op_header = """
#ifndef {op}_H
#define {op}_H

{apisubst}
#ifdef __cplusplus
extern "C" {{
#endif
{prototypes}
#ifdef __cplusplus
}}
#endif

{op_macros}
#define {op}_IMPLEMENTATION "{o}/{p}/{i}"
#ifndef {opi}_VERSION
#define {opi}_VERSION "-"
#endif
#define {op}_VERSION {opi}_VERSION

#endif
"""

o_macro = "#define {o}{macro} {op}{macro}"
op_macro = "#define {op}{macro} {opi}{macro}"
protot = "extern int {op}{prototype};"

class Primitive(object):
    def spath(self):
        return os.path.join(
            self._ptype,
            self._cipher,
            self._implementation)

    def target_dir(self, *args):
        return os.path.join("target", self.spath(), *args)

    def source_dir(self, *args):
        return os.path.join("fetched/supercop-20130419", self.spath(), *args)

    def api(self):
        with open(self.source_dir("api.h")) as f:
            return f.read()

    def write_headers(self):
        include_dir = self.target_dir("include")
        makedirs(include_dir)
        substitutions = dict(
            o=self._ptype,
            p=self._cipher,
            i=self._implementation)
        substitutions["op"] = "{o}_{p}".format(**substitutions)
        substitutions["opi"] = "{op}_{i}".format(**substitutions)
        substitutions["o_macros"] = "\n".join(
            o_macro.format(**dict(substitutions, macro=macro))
            for macro in operations[self._ptype]["macros"])
        substitutions["op_macros"] = "\n".join(
            op_macro.format(**dict(substitutions, macro=macro))
            for macro in operations[self._ptype]["macros"])
        substitutions["apisubst"] = re.sub(
            r"\wCRYPTO_",
            " {opi}_".format(**substitutions),
            self.api())
        substitutions["prototypes"] = "\n".join(
            protot.format(**dict(substitutions, prototype=prototype))
            for prototype in operations[self._ptype]["prototypes"])
        with open(os.path.join(include_dir, "{o}.h".format(**substitutions)), "w") as f:
            f.write(o_header.format(**substitutions))
        with open(os.path.join(include_dir, "{op}.h".format(**substitutions)), "w") as f:
            f.write(op_header.format(**substitutions))
        return include_dir

    def build(self):
        inc = self.write_headers()
        obj = os.path.join(self.target_dir(), "obj")
        makedirs(obj)
        for name in self._cfiles:
            run("cc", "-fpic", "-Wall",
                "-I", inc,
                "-c",
                "-o",  os.path.join(obj, name + ".o"),
                self.source_dir(name + ".c"))

    def object_files(self):
        for name in self._cfiles:
            yield os.path.join(self.target_dir(), "obj", name + ".o")



class SalsaCore(Primitive):
    _ptype = "crypto_core"
    _cipher = "salsa20"
    _implementation = "ref"
    _cfiles = ["core"]

#cc -fpic -Wall -shared -Wl,-soname,libbletchleyprimitives.so.1 -o libbletchleyprimitives.so -I . supercop/crypto_stream/chacha12/krovetz/stream.c

def _gather_objfiles(primitives):
    for primitive in primitives:
        for o in primitive.object_files():
            yield o

def build_so():
    primitives = [SalsaCore()]
    for primitive in primitives:
        primitive.build()
    makedirs("target/lib")
    run("cc", "-shared", "-Wl,-soname,libbletchleyprimitives.so.1",
        "-o", "target/lib/libbletchleyprimitives.so.1.0.1",
        *list(_gather_objfiles(primitives)))
    run("ldconfig", "-n", "target/lib")
    # Is this really correct?
    if os.path.exists("target/lib/libbletchleyprimitives.so"):
        os.unlink("target/lib/libbletchleyprimitives.so")
    os.symlink("libbletchleyprimitives.so.1.0.1",
        "target/lib/libbletchleyprimitives.so")

def build_c_test():
    makedirs("target/obj")
    run("cc", "-Wall", "-std=c99",
        "-o", "target/obj/call-test.o",
        "-c", "src/main/c/call-test.c")
    makedirs("target/exe")
    run("cc",
        "-o", "target/exe/call-test",
        "target/obj/call-test.o",
        "-L", "target/lib",
        "-lbletchleyprimitives")

def build():
    build_so()
    build_c_test()

if __name__ == "__main__":
    main()
