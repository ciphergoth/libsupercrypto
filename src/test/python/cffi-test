#!/usr/bin/env python2.7

import bletchley_primitive
ffi = bletchley_primitive.ffi

def alloc(size):
    return ffi.new("unsigned char[]", size)

def printbytes(output):
    print " ".join(["%02x" % b for b in output])

salsa20 = bletchley_primitive.Primitive("crypto_core", "salsa20")
print salsa20
print salsa20.const.OUTPUTBYTES
key = alloc([0x80] + 31*[0])
inpt = alloc(32*[0])
sigma = alloc("expand 32-byte k")
output = alloc(salsa20.const.OUTPUTBYTES)
salsa20(output, inpt, key, sigma);
printbytes(output)

chacha12 = bletchley_primitive.Primitive("crypto_stream", "chacha12")
print chacha12
key = ffi.new("unsigned char[]",
    [0] * chacha12.const.KEYBYTES)
nonce = ffi.new("unsigned char[]",
    [0] * chacha12.const.NONCEBYTES)
output_size = 128
output = alloc(output_size)
chacha12(output, output_size, nonce, key);

printbytes(output)

print " ".join(["%02x" % b for b in output])

ed25519 = bletchley_primitive.Primitive("crypto_sign", "ed25519")
print ed25519
secretkey = ffi.new("unsigned char[]",
    [0] * ed25519.const.SECRETKEYBYTES)
publickey = ffi.new("unsigned char[]",
    [0] * ed25519.const.PUBLICKEYBYTES)
ed25519.keypair(publickey, secretkey)
printbytes(publickey)
